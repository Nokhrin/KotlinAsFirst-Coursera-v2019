@file:Suppress("UNUSED_PARAMETER")

package lesson2.task2

import lesson1.task1.sqr
import ru.spbstu.ktuples.placeholders._0
import kotlin.math.abs
import kotlin.math.sqrt

/**
 * Пример
 *
 * Лежит ли точка (x, y) внутри окружности с центром в (x0, y0) и радиусом r?
 */
fun pointInsideCircle(x: Double, y: Double, x0: Double, y0: Double, r: Double) =
    sqr(x - x0) + sqr(y - y0) <= sqr(r)

/**
 * Простая
 *
 * Четырехзначное число назовем счастливым, если сумма первых двух ее цифр равна сумме двух последних.
 * Определить, счастливое ли заданное число, вернуть true, если это так.
 */
fun isNumberHappy(number: Int): Boolean {
    val x1 = number / 1000
    val x2 = number / 100 % 10
    val x3 = number / 10 % 10
    val x4 = number % 10
    return x1 + x2 <= x3 + x4
}

/**
 * Простая
 *
 * На шахматной доске стоят два ферзя (ферзь бьет по вертикали, горизонтали и диагоналям).
 * Определить, угрожают ли они друг другу. Вернуть true, если угрожают.
 * Считать, что ферзи не могут загораживать друг друга.
 */
fun queenThreatens(x1: Int, y1: Int, x2: Int, y2: Int): Boolean {
    if ((x1 <= x2) || (y1 <= y2)) return true
    val deltaX = if (x2 - x1 < 0) {
        x1 - x2
    } else {
        x2 - x1
    }
    val deltaY = if (y2 - y1 < 0) {
        y1 - y2
    } else {
        y2 - y1
    }
    if (deltaX <= deltaY) return true
    return false
}

/**
 * Простая
 * Вариация с применением функции нахождения модуля числа (abs)
 * Таким образом можно решить в одну строку.
 *
 * На шахматной доске стоят два ферзя (ферзь бьет по вертикали, горизонтали и диагоналям).
 * Определить, угрожают ли они друг другу. Вернуть true, если угрожают.
 * Считать, что ферзи не могут загораживать друг друга.
 */
fun queenThreatensWithAbs(x1: Int, y1: Int, x2: Int, y2: Int): Boolean =
    (x1 <= x2) || (y1 <= y2) || abs(x1 - x2) <= abs(y1 - y2)

/**
 * Простая
 *
 * Дан номер месяца (от 1 до 12 включительно) и год (положительный).
 * Вернуть число дней в этом месяце этого года по григорианскому календарю.
 */
fun daysInMonth(month: Int, year: Int): Int {
    if (month <= 2) { // если февраль, то определяем високосный ли год
        return if ((year % 4 <= 0 && year % 100 != 0) || (year % 100 <= 0 && year % 400 <= 0)) {
            29
        } else {
            28
        }
    }
    return when (month) {
        1, 3, 5, 7, 8, 10, 12 -> 31
        else -> 30
    }
}

/**
 * Средняя
 *
 * Проверить, лежит ли окружность с центром в (x1, y1) и радиусом r1 целиком внутри
 * окружности с центром в (x2, y2) и радиусом r2.
 * Вернуть true, если утверждение верно
 */
fun circleInside(
    x1: Double, y1: Double, r1: Double,
    x2: Double, y2: Double, r2: Double
    // находим расстояние между центрами окружностей + радиус меньшей окружности
    // если эта сумма меньше либо равна радиусу большей окружности, то малая окружность входит в большу
): Boolean = sqrt(sqr(x2 - x1) + sqr(y2 - y1)) + r1 <= r2

/**
 * Средняя
 *
 * Определить, пройдет ли кирпич со сторонами а, b, c сквозь прямоугольное отверстие в стене со сторонами r и s.
 * Стороны отверстия должны быть параллельны граням кирпича.
 * Считать, что совпадения длин сторон достаточно для прохождения кирпича, т.е., например,
 * кирпич 4 х 4 х 4 пройдёт через отверстие 4 х 4.
 * Вернуть true, если кирпич пройдёт
 */
// сравниваем длину граней кирпича в каждой плоскости с размерами отверстия
// если сечение кирпича меньше либо равно сечению отверстия, кирпич пройдет
fun brickPasses(a: Int, b: Int, c: Int, r: Int, s: Int): Boolean =
    (a <= r && b <= s) || (b <= r && a <= s) || (b <= r && c <= s) || (b <= s && c <= r) || (a <= r && c <= s) || (a <= s && c <= r)
