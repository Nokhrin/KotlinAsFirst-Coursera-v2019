@file:Suppress("UNUSED_PARAMETER")

package lesson3.task1

import kotlin.math.sqrt

/**
 * Простая
 *
 * Найти количество цифр в заданном числе n.
 * Например, число 1 содержит 1 цифру, 456 -- 3 цифры, 65536 -- 5 цифр.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */
fun digitNumberLoop(n: Int): Int { // цикл
    var countDigits = 1
    var myNum = n
    while (myNum / 10 != 0) {
        countDigits += 1
        myNum /= 10
    }
    return countDigits
}

/**
 * Простая
 *
 * Найти число Фибоначчи из ряда 1, 1, 2, 3, 5, 8, 13, 21, ... с номером n.
 * Ряд Фибоначчи определён следующим образом: fib(1) = 1, fib(2) = 1, fib(n+2) = fib(n) + fib(n+1)
 */
fun fibRec(n: Int): Int = // рекурсия - неэффективный алгоритм для этой задачи
    when {
        n == 1 -> 1
        n == 2 -> 1
        else -> fib(n - 1) + fib(n - 2)
    }

/**
 * Простая
 *
 * Определить, являются ли два заданных числа m и n взаимно простыми.
 * Взаимно простые числа не имеют общих делителей, кроме 1.
 * Например, 25 и 49 взаимно простые, а 6 и 8 -- нет.
 */
fun isCoPrimeSpeedTest(m: Int, n: Int): Boolean { // "замедленная" по сравнению с основной, для сравнения
    var result = true
    // определим минимальное из заданных чисел
    var min = m
    if (m > n) {
        min = n
    }
    // если числа делятся на 2, то они не взаимнопростые. Исключим 2 из перебора.
    for (i in 2..min) {
        if (m % i == 0 && n % i == 0) {
            result = false
            break
        }
    }
    return result
}